// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: productManager/v1/productManager.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Day int32

const (
	Day_Monday    Day = 0
	Day_Tuesday   Day = 1
	Day_Wednesday Day = 2
	Day_Thursday  Day = 3
	Day_Friday    Day = 4
	Day_Saturday  Day = 5
	Day_Sunday    Day = 6
)

// Enum value maps for Day.
var (
	Day_name = map[int32]string{
		0: "Monday",
		1: "Tuesday",
		2: "Wednesday",
		3: "Thursday",
		4: "Friday",
		5: "Saturday",
		6: "Sunday",
	}
	Day_value = map[string]int32{
		"Monday":    0,
		"Tuesday":   1,
		"Wednesday": 2,
		"Thursday":  3,
		"Friday":    4,
		"Saturday":  5,
		"Sunday":    6,
	}
)

func (x Day) Enum() *Day {
	p := new(Day)
	*p = x
	return p
}

func (x Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Day) Descriptor() protoreflect.EnumDescriptor {
	return file_productManager_v1_productManager_proto_enumTypes[0].Descriptor()
}

func (Day) Type() protoreflect.EnumType {
	return &file_productManager_v1_productManager_proto_enumTypes[0]
}

func (x Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Day.Descriptor instead.
func (Day) EnumDescriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{0}
}

type FilterDistance int32

const (
	FilterDistance_None   FilterDistance = 0
	FilterDistance_One    FilterDistance = 1
	FilterDistance_Five   FilterDistance = 2
	FilterDistance_Twenty FilterDistance = 3
)

// Enum value maps for FilterDistance.
var (
	FilterDistance_name = map[int32]string{
		0: "None",
		1: "One",
		2: "Five",
		3: "Twenty",
	}
	FilterDistance_value = map[string]int32{
		"None":   0,
		"One":    1,
		"Five":   2,
		"Twenty": 3,
	}
)

func (x FilterDistance) Enum() *FilterDistance {
	p := new(FilterDistance)
	*p = x
	return p
}

func (x FilterDistance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterDistance) Descriptor() protoreflect.EnumDescriptor {
	return file_productManager_v1_productManager_proto_enumTypes[1].Descriptor()
}

func (FilterDistance) Type() protoreflect.EnumType {
	return &file_productManager_v1_productManager_proto_enumTypes[1]
}

func (x FilterDistance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterDistance.Descriptor instead.
func (FilterDistance) EnumDescriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{1}
}

type OrderBy int32

const (
	OrderBy_NameRevelance OrderBy = 0
	OrderBy_Favorites     OrderBy = 1
	OrderBy_Recent        OrderBy = 2
	OrderBy_A_to_Z        OrderBy = 3
	OrderBy_Z_to_A        OrderBy = 4
)

// Enum value maps for OrderBy.
var (
	OrderBy_name = map[int32]string{
		0: "NameRevelance",
		1: "Favorites",
		2: "Recent",
		3: "A_to_Z",
		4: "Z_to_A",
	}
	OrderBy_value = map[string]int32{
		"NameRevelance": 0,
		"Favorites":     1,
		"Recent":        2,
		"A_to_Z":        3,
		"Z_to_A":        4,
	}
)

func (x OrderBy) Enum() *OrderBy {
	p := new(OrderBy)
	*p = x
	return p
}

func (x OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_productManager_v1_productManager_proto_enumTypes[2].Descriptor()
}

func (OrderBy) Type() protoreflect.EnumType {
	return &file_productManager_v1_productManager_proto_enumTypes[2]
}

func (x OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy.Descriptor instead.
func (OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{2}
}

type GetItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetItemRequest) Reset() {
	*x = GetItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemRequest) ProtoMessage() {}

func (x *GetItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemRequest.ProtoReflect.Descriptor instead.
func (*GetItemRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{0}
}

func (x *GetItemRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirestoreItem *FirestoreItem `protobuf:"bytes,1,opt,name=firestoreItem,proto3" json:"firestoreItem,omitempty"`
}

func (x *GetItemResponse) Reset() {
	*x = GetItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemResponse) ProtoMessage() {}

func (x *GetItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemResponse.ProtoReflect.Descriptor instead.
func (*GetItemResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{1}
}

func (x *GetItemResponse) GetFirestoreItem() *FirestoreItem {
	if x != nil {
		return x.FirestoreItem
	}
	return nil
}

type AddItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BusinessId string   `protobuf:"bytes,2,opt,name=businessId,proto3" json:"businessId,omitempty"`
	Type       []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	Detail     string   `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Day        Day      `protobuf:"varint,5,opt,name=day,proto3,enum=TapMars.productManager.v1.Day" json:"day,omitempty"`
	Start      string   `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	End        string   `protobuf:"bytes,7,opt,name=end,proto3" json:"end,omitempty"`
	FromOpen   bool     `protobuf:"varint,8,opt,name=fromOpen,proto3" json:"fromOpen,omitempty"`
	ToClose    bool     `protobuf:"varint,9,opt,name=toClose,proto3" json:"toClose,omitempty"`
}

func (x *AddItemRequest) Reset() {
	*x = AddItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddItemRequest) ProtoMessage() {}

func (x *AddItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddItemRequest.ProtoReflect.Descriptor instead.
func (*AddItemRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{2}
}

func (x *AddItemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddItemRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *AddItemRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AddItemRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *AddItemRequest) GetDay() Day {
	if x != nil {
		return x.Day
	}
	return Day_Monday
}

func (x *AddItemRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *AddItemRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *AddItemRequest) GetFromOpen() bool {
	if x != nil {
		return x.FromOpen
	}
	return false
}

func (x *AddItemRequest) GetToClose() bool {
	if x != nil {
		return x.ToClose
	}
	return false
}

type AddItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewId string `protobuf:"bytes,1,opt,name=newId,proto3" json:"newId,omitempty"`
}

func (x *AddItemResponse) Reset() {
	*x = AddItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddItemResponse) ProtoMessage() {}

func (x *AddItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddItemResponse.ProtoReflect.Descriptor instead.
func (*AddItemResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{3}
}

func (x *AddItemResponse) GetNewId() string {
	if x != nil {
		return x.NewId
	}
	return ""
}

type DeleteItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteItemRequest) Reset() {
	*x = DeleteItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteItemRequest) ProtoMessage() {}

func (x *DeleteItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteItemRequest.ProtoReflect.Descriptor instead.
func (*DeleteItemRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteItemRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteItemResponse) Reset() {
	*x = DeleteItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteItemResponse) ProtoMessage() {}

func (x *DeleteItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteItemResponse.ProtoReflect.Descriptor instead.
func (*DeleteItemResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteItemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SearchBusinessesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Latitude       float64        `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64        `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	FilterDistance FilterDistance `protobuf:"varint,4,opt,name=filterDistance,proto3,enum=TapMars.productManager.v1.FilterDistance" json:"filterDistance,omitempty"`
	OrderBy        OrderBy        `protobuf:"varint,5,opt,name=orderBy,proto3,enum=TapMars.productManager.v1.OrderBy" json:"orderBy,omitempty"`
}

func (x *SearchBusinessesRequest) Reset() {
	*x = SearchBusinessesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBusinessesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBusinessesRequest) ProtoMessage() {}

func (x *SearchBusinessesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBusinessesRequest.ProtoReflect.Descriptor instead.
func (*SearchBusinessesRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{6}
}

func (x *SearchBusinessesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchBusinessesRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *SearchBusinessesRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *SearchBusinessesRequest) GetFilterDistance() FilterDistance {
	if x != nil {
		return x.FilterDistance
	}
	return FilterDistance_None
}

func (x *SearchBusinessesRequest) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_NameRevelance
}

type SearchBusinessesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirestoreBusiness []*FirestoreBusiness `protobuf:"bytes,1,rep,name=firestoreBusiness,proto3" json:"firestoreBusiness,omitempty"`
}

func (x *SearchBusinessesResponse) Reset() {
	*x = SearchBusinessesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBusinessesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBusinessesResponse) ProtoMessage() {}

func (x *SearchBusinessesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBusinessesResponse.ProtoReflect.Descriptor instead.
func (*SearchBusinessesResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{7}
}

func (x *SearchBusinessesResponse) GetFirestoreBusiness() []*FirestoreBusiness {
	if x != nil {
		return x.FirestoreBusiness
	}
	return nil
}

type GetBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBusinessRequest) Reset() {
	*x = GetBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessRequest) ProtoMessage() {}

func (x *GetBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{8}
}

func (x *GetBusinessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirestoreBusinesss *FirestoreBusiness `protobuf:"bytes,1,opt,name=FirestoreBusinesss,proto3" json:"FirestoreBusinesss,omitempty"`
}

func (x *GetBusinessResponse) Reset() {
	*x = GetBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessResponse) ProtoMessage() {}

func (x *GetBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{9}
}

func (x *GetBusinessResponse) GetFirestoreBusinesss() *FirestoreBusiness {
	if x != nil {
		return x.FirestoreBusinesss
	}
	return nil
}

type AddBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Monday    *OperationalDay `protobuf:"bytes,2,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   *OperationalDay `protobuf:"bytes,3,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday *OperationalDay `protobuf:"bytes,4,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  *OperationalDay `protobuf:"bytes,5,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    *OperationalDay `protobuf:"bytes,6,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday  *OperationalDay `protobuf:"bytes,7,opt,name=saturday,proto3" json:"saturday,omitempty"`
	Sunday    *OperationalDay `protobuf:"bytes,8,opt,name=sunday,proto3" json:"sunday,omitempty"`
	Address   *Address        `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AddBusinessRequest) Reset() {
	*x = AddBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessRequest) ProtoMessage() {}

func (x *AddBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessRequest.ProtoReflect.Descriptor instead.
func (*AddBusinessRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{10}
}

func (x *AddBusinessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddBusinessRequest) GetMonday() *OperationalDay {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *AddBusinessRequest) GetTuesday() *OperationalDay {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *AddBusinessRequest) GetWednesday() *OperationalDay {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *AddBusinessRequest) GetThursday() *OperationalDay {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *AddBusinessRequest) GetFriday() *OperationalDay {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *AddBusinessRequest) GetSaturday() *OperationalDay {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *AddBusinessRequest) GetSunday() *OperationalDay {
	if x != nil {
		return x.Sunday
	}
	return nil
}

func (x *AddBusinessRequest) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type AddBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddBusinessResponse) Reset() {
	*x = AddBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessResponse) ProtoMessage() {}

func (x *AddBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessResponse.ProtoReflect.Descriptor instead.
func (*AddBusinessResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{11}
}

func (x *AddBusinessResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Monday    *OperationalDay `protobuf:"bytes,3,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   *OperationalDay `protobuf:"bytes,4,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday *OperationalDay `protobuf:"bytes,5,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  *OperationalDay `protobuf:"bytes,6,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    *OperationalDay `protobuf:"bytes,7,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday  *OperationalDay `protobuf:"bytes,8,opt,name=saturday,proto3" json:"saturday,omitempty"`
	Sunday    *OperationalDay `protobuf:"bytes,9,opt,name=sunday,proto3" json:"sunday,omitempty"`
	Address   *Address        `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UpdateBusinessRequest) Reset() {
	*x = UpdateBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessRequest) ProtoMessage() {}

func (x *UpdateBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateBusinessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBusinessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBusinessRequest) GetMonday() *OperationalDay {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *UpdateBusinessRequest) GetTuesday() *OperationalDay {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *UpdateBusinessRequest) GetWednesday() *OperationalDay {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *UpdateBusinessRequest) GetThursday() *OperationalDay {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *UpdateBusinessRequest) GetFriday() *OperationalDay {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *UpdateBusinessRequest) GetSaturday() *OperationalDay {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *UpdateBusinessRequest) GetSunday() *OperationalDay {
	if x != nil {
		return x.Sunday
	}
	return nil
}

func (x *UpdateBusinessRequest) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type UpdateBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateBusinessResponse) Reset() {
	*x = UpdateBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessResponse) ProtoMessage() {}

func (x *UpdateBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessResponse.ProtoReflect.Descriptor instead.
func (*UpdateBusinessResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateBusinessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBusinessRequest) Reset() {
	*x = DeleteBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessRequest) ProtoMessage() {}

func (x *DeleteBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessRequest) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteBusinessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteBusinessResponse) Reset() {
	*x = DeleteBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessResponse) ProtoMessage() {}

func (x *DeleteBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessResponse.ProtoReflect.Descriptor instead.
func (*DeleteBusinessResponse) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteBusinessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FirestoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	BusinessId   string   `protobuf:"bytes,4,opt,name=businessId,proto3" json:"businessId,omitempty"`
	BusinessName string   `protobuf:"bytes,5,opt,name=businessName,proto3" json:"businessName,omitempty"`
	Detail       string   `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`
	Favorites    int32    `protobuf:"varint,7,opt,name=favorites,proto3" json:"favorites,omitempty"`
	Day          Day      `protobuf:"varint,8,opt,name=day,proto3,enum=TapMars.productManager.v1.Day" json:"day,omitempty"`
	Bleeds       bool     `protobuf:"varint,9,opt,name=bleeds,proto3" json:"bleeds,omitempty"`
	Start        string   `protobuf:"bytes,10,opt,name=start,proto3" json:"start,omitempty"`
	End          string   `protobuf:"bytes,11,opt,name=end,proto3" json:"end,omitempty"`
	FromOpen     bool     `protobuf:"varint,12,opt,name=fromOpen,proto3" json:"fromOpen,omitempty"`
	ToClose      bool     `protobuf:"varint,13,opt,name=toClose,proto3" json:"toClose,omitempty"`
	H3Index6     string   `protobuf:"bytes,14,opt,name=h3index6,proto3" json:"h3index6,omitempty"`
	H3Index7     string   `protobuf:"bytes,15,opt,name=h3index7,proto3" json:"h3index7,omitempty"`
	H3Index8     string   `protobuf:"bytes,16,opt,name=h3index8,proto3" json:"h3index8,omitempty"`
	H3Index15    string   `protobuf:"bytes,17,opt,name=h3index15,proto3" json:"h3index15,omitempty"`
	DateCreated  string   `protobuf:"bytes,18,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	LastModified string   `protobuf:"bytes,19,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
}

func (x *FirestoreItem) Reset() {
	*x = FirestoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirestoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirestoreItem) ProtoMessage() {}

func (x *FirestoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirestoreItem.ProtoReflect.Descriptor instead.
func (*FirestoreItem) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{16}
}

func (x *FirestoreItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirestoreItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirestoreItem) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FirestoreItem) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *FirestoreItem) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *FirestoreItem) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *FirestoreItem) GetFavorites() int32 {
	if x != nil {
		return x.Favorites
	}
	return 0
}

func (x *FirestoreItem) GetDay() Day {
	if x != nil {
		return x.Day
	}
	return Day_Monday
}

func (x *FirestoreItem) GetBleeds() bool {
	if x != nil {
		return x.Bleeds
	}
	return false
}

func (x *FirestoreItem) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *FirestoreItem) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *FirestoreItem) GetFromOpen() bool {
	if x != nil {
		return x.FromOpen
	}
	return false
}

func (x *FirestoreItem) GetToClose() bool {
	if x != nil {
		return x.ToClose
	}
	return false
}

func (x *FirestoreItem) GetH3Index6() string {
	if x != nil {
		return x.H3Index6
	}
	return ""
}

func (x *FirestoreItem) GetH3Index7() string {
	if x != nil {
		return x.H3Index7
	}
	return ""
}

func (x *FirestoreItem) GetH3Index8() string {
	if x != nil {
		return x.H3Index8
	}
	return ""
}

func (x *FirestoreItem) GetH3Index15() string {
	if x != nil {
		return x.H3Index15
	}
	return ""
}

func (x *FirestoreItem) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *FirestoreItem) GetLastModified() string {
	if x != nil {
		return x.LastModified
	}
	return ""
}

type FirestoreBusiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Favorites    int32           `protobuf:"varint,3,opt,name=favorites,proto3" json:"favorites,omitempty"`
	Monday       *OperationalDay `protobuf:"bytes,4,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday      *OperationalDay `protobuf:"bytes,5,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday    *OperationalDay `protobuf:"bytes,6,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday     *OperationalDay `protobuf:"bytes,7,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday       *OperationalDay `protobuf:"bytes,8,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday     *OperationalDay `protobuf:"bytes,9,opt,name=saturday,proto3" json:"saturday,omitempty"`
	Sunday       *OperationalDay `protobuf:"bytes,10,opt,name=sunday,proto3" json:"sunday,omitempty"`
	Address      *Address        `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	H3Index6     string          `protobuf:"bytes,12,opt,name=h3index6,proto3" json:"h3index6,omitempty"`
	H3Index7     string          `protobuf:"bytes,13,opt,name=h3index7,proto3" json:"h3index7,omitempty"`
	H3Index8     string          `protobuf:"bytes,14,opt,name=h3index8,proto3" json:"h3index8,omitempty"`
	H3Index15    string          `protobuf:"bytes,15,opt,name=h3index15,proto3" json:"h3index15,omitempty"`
	DateCreated  string          `protobuf:"bytes,16,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	LastModified string          `protobuf:"bytes,17,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
}

func (x *FirestoreBusiness) Reset() {
	*x = FirestoreBusiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirestoreBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirestoreBusiness) ProtoMessage() {}

func (x *FirestoreBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirestoreBusiness.ProtoReflect.Descriptor instead.
func (*FirestoreBusiness) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{17}
}

func (x *FirestoreBusiness) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirestoreBusiness) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirestoreBusiness) GetFavorites() int32 {
	if x != nil {
		return x.Favorites
	}
	return 0
}

func (x *FirestoreBusiness) GetMonday() *OperationalDay {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *FirestoreBusiness) GetTuesday() *OperationalDay {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *FirestoreBusiness) GetWednesday() *OperationalDay {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *FirestoreBusiness) GetThursday() *OperationalDay {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *FirestoreBusiness) GetFriday() *OperationalDay {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *FirestoreBusiness) GetSaturday() *OperationalDay {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *FirestoreBusiness) GetSunday() *OperationalDay {
	if x != nil {
		return x.Sunday
	}
	return nil
}

func (x *FirestoreBusiness) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *FirestoreBusiness) GetH3Index6() string {
	if x != nil {
		return x.H3Index6
	}
	return ""
}

func (x *FirestoreBusiness) GetH3Index7() string {
	if x != nil {
		return x.H3Index7
	}
	return ""
}

func (x *FirestoreBusiness) GetH3Index8() string {
	if x != nil {
		return x.H3Index8
	}
	return ""
}

func (x *FirestoreBusiness) GetH3Index15() string {
	if x != nil {
		return x.H3Index15
	}
	return ""
}

func (x *FirestoreBusiness) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *FirestoreBusiness) GetLastModified() string {
	if x != nil {
		return x.LastModified
	}
	return ""
}

type OperationalDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End      string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Bleeds   bool   `protobuf:"varint,3,opt,name=bleeds,proto3" json:"bleeds,omitempty"`
	IsClosed bool   `protobuf:"varint,4,opt,name=isClosed,proto3" json:"isClosed,omitempty"`
}

func (x *OperationalDay) Reset() {
	*x = OperationalDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalDay) ProtoMessage() {}

func (x *OperationalDay) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalDay.ProtoReflect.Descriptor instead.
func (*OperationalDay) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{18}
}

func (x *OperationalDay) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *OperationalDay) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *OperationalDay) GetBleeds() bool {
	if x != nil {
		return x.Bleeds
	}
	return false
}

func (x *OperationalDay) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line1 string `protobuf:"bytes,1,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2 string `protobuf:"bytes,2,opt,name=line2,proto3" json:"line2,omitempty"`
	City  string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Zip   string `protobuf:"bytes,5,opt,name=zip,proto3" json:"zip,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productManager_v1_productManager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_productManager_v1_productManager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_productManager_v1_productManager_proto_rawDescGZIP(), []int{19}
}

func (x *Address) GetLine1() string {
	if x != nil {
		return x.Line1
	}
	return ""
}

func (x *Address) GetLine2() string {
	if x != nil {
		return x.Line2
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

var File_productManager_v1_productManager_proto protoreflect.FileDescriptor

var file_productManager_v1_productManager_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x80, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x70, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x65, 0x77, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x17, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x54, 0x61,
	0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x22, 0x76, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x61,
	0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x11, 0x66, 0x69, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x24, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x73, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x46, 0x69, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x12, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x73, 0x22, 0xcb, 0x04, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x6d,
	0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x79, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x09, 0x77, 0x65,
	0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73,
	0x64, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79,
	0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x72,
	0x69, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70,
	0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x45, 0x0a,
	0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75,
	0x72, 0x64, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52,
	0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x25, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xde, 0x04, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x6f,
	0x6e, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70,
	0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x43, 0x0a,
	0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x12, 0x47, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79,
	0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x74,
	0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64,
	0x61, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x66,
	0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x79, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x06,
	0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54,
	0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x12,
	0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa1,
	0x04, 0x0a, 0x0d, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x33,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x36, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x33,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x37, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x37, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x38, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x38, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x35, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x22, 0xb0, 0x06, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x6f,
	0x6e, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70,
	0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x43, 0x0a,
	0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x12, 0x47, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79,
	0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x74,
	0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64,
	0x61, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x66,
	0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x79, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x06,
	0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54,
	0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x12,
	0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x36, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x33, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x37, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x33, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x37, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x38, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x38, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x35, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x33, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x35, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x2a, 0x61, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x75, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73,
	0x64, 0x61, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61,
	0x79, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x06, 0x2a, 0x39, 0x0a, 0x0e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x77, 0x65, 0x6e,
	0x74, 0x79, 0x10, 0x03, 0x2a, 0x4f, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x5f, 0x74, 0x6f, 0x5f, 0x5a, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x5a, 0x5f, 0x74,
	0x6f, 0x5f, 0x41, 0x10, 0x04, 0x32, 0x94, 0x07, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c,
	0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x54,
	0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x54, 0x61, 0x70, 0x4d,
	0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x54, 0x61, 0x70, 0x4d,
	0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x54,
	0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_productManager_v1_productManager_proto_rawDescOnce sync.Once
	file_productManager_v1_productManager_proto_rawDescData = file_productManager_v1_productManager_proto_rawDesc
)

func file_productManager_v1_productManager_proto_rawDescGZIP() []byte {
	file_productManager_v1_productManager_proto_rawDescOnce.Do(func() {
		file_productManager_v1_productManager_proto_rawDescData = protoimpl.X.CompressGZIP(file_productManager_v1_productManager_proto_rawDescData)
	})
	return file_productManager_v1_productManager_proto_rawDescData
}

var file_productManager_v1_productManager_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_productManager_v1_productManager_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_productManager_v1_productManager_proto_goTypes = []interface{}{
	(Day)(0),                         // 0: TapMars.productManager.v1.Day
	(FilterDistance)(0),              // 1: TapMars.productManager.v1.FilterDistance
	(OrderBy)(0),                     // 2: TapMars.productManager.v1.OrderBy
	(*GetItemRequest)(nil),           // 3: TapMars.productManager.v1.GetItemRequest
	(*GetItemResponse)(nil),          // 4: TapMars.productManager.v1.GetItemResponse
	(*AddItemRequest)(nil),           // 5: TapMars.productManager.v1.AddItemRequest
	(*AddItemResponse)(nil),          // 6: TapMars.productManager.v1.AddItemResponse
	(*DeleteItemRequest)(nil),        // 7: TapMars.productManager.v1.DeleteItemRequest
	(*DeleteItemResponse)(nil),       // 8: TapMars.productManager.v1.DeleteItemResponse
	(*SearchBusinessesRequest)(nil),  // 9: TapMars.productManager.v1.SearchBusinessesRequest
	(*SearchBusinessesResponse)(nil), // 10: TapMars.productManager.v1.SearchBusinessesResponse
	(*GetBusinessRequest)(nil),       // 11: TapMars.productManager.v1.GetBusinessRequest
	(*GetBusinessResponse)(nil),      // 12: TapMars.productManager.v1.GetBusinessResponse
	(*AddBusinessRequest)(nil),       // 13: TapMars.productManager.v1.AddBusinessRequest
	(*AddBusinessResponse)(nil),      // 14: TapMars.productManager.v1.AddBusinessResponse
	(*UpdateBusinessRequest)(nil),    // 15: TapMars.productManager.v1.UpdateBusinessRequest
	(*UpdateBusinessResponse)(nil),   // 16: TapMars.productManager.v1.UpdateBusinessResponse
	(*DeleteBusinessRequest)(nil),    // 17: TapMars.productManager.v1.DeleteBusinessRequest
	(*DeleteBusinessResponse)(nil),   // 18: TapMars.productManager.v1.DeleteBusinessResponse
	(*FirestoreItem)(nil),            // 19: TapMars.productManager.v1.FirestoreItem
	(*FirestoreBusiness)(nil),        // 20: TapMars.productManager.v1.FirestoreBusiness
	(*OperationalDay)(nil),           // 21: TapMars.productManager.v1.OperationalDay
	(*Address)(nil),                  // 22: TapMars.productManager.v1.Address
}
var file_productManager_v1_productManager_proto_depIdxs = []int32{
	19, // 0: TapMars.productManager.v1.GetItemResponse.firestoreItem:type_name -> TapMars.productManager.v1.FirestoreItem
	0,  // 1: TapMars.productManager.v1.AddItemRequest.day:type_name -> TapMars.productManager.v1.Day
	1,  // 2: TapMars.productManager.v1.SearchBusinessesRequest.filterDistance:type_name -> TapMars.productManager.v1.FilterDistance
	2,  // 3: TapMars.productManager.v1.SearchBusinessesRequest.orderBy:type_name -> TapMars.productManager.v1.OrderBy
	20, // 4: TapMars.productManager.v1.SearchBusinessesResponse.firestoreBusiness:type_name -> TapMars.productManager.v1.FirestoreBusiness
	20, // 5: TapMars.productManager.v1.GetBusinessResponse.FirestoreBusinesss:type_name -> TapMars.productManager.v1.FirestoreBusiness
	21, // 6: TapMars.productManager.v1.AddBusinessRequest.monday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 7: TapMars.productManager.v1.AddBusinessRequest.tuesday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 8: TapMars.productManager.v1.AddBusinessRequest.wednesday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 9: TapMars.productManager.v1.AddBusinessRequest.thursday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 10: TapMars.productManager.v1.AddBusinessRequest.friday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 11: TapMars.productManager.v1.AddBusinessRequest.saturday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 12: TapMars.productManager.v1.AddBusinessRequest.sunday:type_name -> TapMars.productManager.v1.OperationalDay
	22, // 13: TapMars.productManager.v1.AddBusinessRequest.address:type_name -> TapMars.productManager.v1.Address
	21, // 14: TapMars.productManager.v1.UpdateBusinessRequest.monday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 15: TapMars.productManager.v1.UpdateBusinessRequest.tuesday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 16: TapMars.productManager.v1.UpdateBusinessRequest.wednesday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 17: TapMars.productManager.v1.UpdateBusinessRequest.thursday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 18: TapMars.productManager.v1.UpdateBusinessRequest.friday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 19: TapMars.productManager.v1.UpdateBusinessRequest.saturday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 20: TapMars.productManager.v1.UpdateBusinessRequest.sunday:type_name -> TapMars.productManager.v1.OperationalDay
	22, // 21: TapMars.productManager.v1.UpdateBusinessRequest.address:type_name -> TapMars.productManager.v1.Address
	0,  // 22: TapMars.productManager.v1.FirestoreItem.day:type_name -> TapMars.productManager.v1.Day
	21, // 23: TapMars.productManager.v1.FirestoreBusiness.monday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 24: TapMars.productManager.v1.FirestoreBusiness.tuesday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 25: TapMars.productManager.v1.FirestoreBusiness.wednesday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 26: TapMars.productManager.v1.FirestoreBusiness.thursday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 27: TapMars.productManager.v1.FirestoreBusiness.friday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 28: TapMars.productManager.v1.FirestoreBusiness.saturday:type_name -> TapMars.productManager.v1.OperationalDay
	21, // 29: TapMars.productManager.v1.FirestoreBusiness.sunday:type_name -> TapMars.productManager.v1.OperationalDay
	22, // 30: TapMars.productManager.v1.FirestoreBusiness.address:type_name -> TapMars.productManager.v1.Address
	3,  // 31: TapMars.productManager.v1.ProductManager.GetItem:input_type -> TapMars.productManager.v1.GetItemRequest
	5,  // 32: TapMars.productManager.v1.ProductManager.AddItem:input_type -> TapMars.productManager.v1.AddItemRequest
	7,  // 33: TapMars.productManager.v1.ProductManager.DeleteItem:input_type -> TapMars.productManager.v1.DeleteItemRequest
	9,  // 34: TapMars.productManager.v1.ProductManager.SearchBusiness:input_type -> TapMars.productManager.v1.SearchBusinessesRequest
	11, // 35: TapMars.productManager.v1.ProductManager.GetBusiness:input_type -> TapMars.productManager.v1.GetBusinessRequest
	13, // 36: TapMars.productManager.v1.ProductManager.AddBusiness:input_type -> TapMars.productManager.v1.AddBusinessRequest
	15, // 37: TapMars.productManager.v1.ProductManager.UpdateBusiness:input_type -> TapMars.productManager.v1.UpdateBusinessRequest
	17, // 38: TapMars.productManager.v1.ProductManager.DeleteBusiness:input_type -> TapMars.productManager.v1.DeleteBusinessRequest
	4,  // 39: TapMars.productManager.v1.ProductManager.GetItem:output_type -> TapMars.productManager.v1.GetItemResponse
	6,  // 40: TapMars.productManager.v1.ProductManager.AddItem:output_type -> TapMars.productManager.v1.AddItemResponse
	8,  // 41: TapMars.productManager.v1.ProductManager.DeleteItem:output_type -> TapMars.productManager.v1.DeleteItemResponse
	10, // 42: TapMars.productManager.v1.ProductManager.SearchBusiness:output_type -> TapMars.productManager.v1.SearchBusinessesResponse
	12, // 43: TapMars.productManager.v1.ProductManager.GetBusiness:output_type -> TapMars.productManager.v1.GetBusinessResponse
	14, // 44: TapMars.productManager.v1.ProductManager.AddBusiness:output_type -> TapMars.productManager.v1.AddBusinessResponse
	16, // 45: TapMars.productManager.v1.ProductManager.UpdateBusiness:output_type -> TapMars.productManager.v1.UpdateBusinessResponse
	18, // 46: TapMars.productManager.v1.ProductManager.DeleteBusiness:output_type -> TapMars.productManager.v1.DeleteBusinessResponse
	39, // [39:47] is the sub-list for method output_type
	31, // [31:39] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_productManager_v1_productManager_proto_init() }
func file_productManager_v1_productManager_proto_init() {
	if File_productManager_v1_productManager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_productManager_v1_productManager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBusinessesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBusinessesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirestoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirestoreBusiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productManager_v1_productManager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_productManager_v1_productManager_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_productManager_v1_productManager_proto_goTypes,
		DependencyIndexes: file_productManager_v1_productManager_proto_depIdxs,
		EnumInfos:         file_productManager_v1_productManager_proto_enumTypes,
		MessageInfos:      file_productManager_v1_productManager_proto_msgTypes,
	}.Build()
	File_productManager_v1_productManager_proto = out.File
	file_productManager_v1_productManager_proto_rawDesc = nil
	file_productManager_v1_productManager_proto_goTypes = nil
	file_productManager_v1_productManager_proto_depIdxs = nil
}
