// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductSearchClient is the client API for ProductSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductSearchClient interface {
	SearchItems(ctx context.Context, in *SearchItemRequest, opts ...grpc.CallOption) (*SearchItemResponse, error)
	GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	GetBusiness(ctx context.Context, in *BusinessRequest, opts ...grpc.CallOption) (*BusinessResponse, error)
}

type productSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSearchClient(cc grpc.ClientConnInterface) ProductSearchClient {
	return &productSearchClient{cc}
}

func (c *productSearchClient) SearchItems(ctx context.Context, in *SearchItemRequest, opts ...grpc.CallOption) (*SearchItemResponse, error) {
	out := new(SearchItemResponse)
	err := c.cc.Invoke(ctx, "/TapMars.productSearch.v1.ProductSearch/SearchItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSearchClient) GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, "/TapMars.productSearch.v1.ProductSearch/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSearchClient) GetBusiness(ctx context.Context, in *BusinessRequest, opts ...grpc.CallOption) (*BusinessResponse, error) {
	out := new(BusinessResponse)
	err := c.cc.Invoke(ctx, "/TapMars.productSearch.v1.ProductSearch/GetBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSearchServer is the server API for ProductSearch service.
// All implementations must embed UnimplementedProductSearchServer
// for forward compatibility
type ProductSearchServer interface {
	SearchItems(context.Context, *SearchItemRequest) (*SearchItemResponse, error)
	GetItem(context.Context, *ItemRequest) (*ItemResponse, error)
	GetBusiness(context.Context, *BusinessRequest) (*BusinessResponse, error)
	mustEmbedUnimplementedProductSearchServer()
}

// UnimplementedProductSearchServer must be embedded to have forward compatible implementations.
type UnimplementedProductSearchServer struct {
}

func (UnimplementedProductSearchServer) SearchItems(context.Context, *SearchItemRequest) (*SearchItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedProductSearchServer) GetItem(context.Context, *ItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedProductSearchServer) GetBusiness(context.Context, *BusinessRequest) (*BusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusiness not implemented")
}
func (UnimplementedProductSearchServer) mustEmbedUnimplementedProductSearchServer() {}

// UnsafeProductSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSearchServer will
// result in compilation errors.
type UnsafeProductSearchServer interface {
	mustEmbedUnimplementedProductSearchServer()
}

func RegisterProductSearchServer(s grpc.ServiceRegistrar, srv ProductSearchServer) {
	s.RegisterService(&ProductSearch_ServiceDesc, srv)
}

func _ProductSearch_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSearchServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.productSearch.v1.ProductSearch/SearchItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSearchServer).SearchItems(ctx, req.(*SearchItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSearch_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSearchServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.productSearch.v1.ProductSearch/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSearchServer).GetItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSearch_GetBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSearchServer).GetBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.productSearch.v1.ProductSearch/GetBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSearchServer).GetBusiness(ctx, req.(*BusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSearch_ServiceDesc is the grpc.ServiceDesc for ProductSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TapMars.productSearch.v1.ProductSearch",
	HandlerType: (*ProductSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchItems",
			Handler:    _ProductSearch_SearchItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ProductSearch_GetItem_Handler,
		},
		{
			MethodName: "GetBusiness",
			Handler:    _ProductSearch_GetBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productSearch/v1/productSearch.proto",
}
