// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/TapMars/protobuf-models-go/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserFirestoreClient is the client API for UserFirestore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFirestoreClient interface {
	GetFavoriteBusinesses(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*FavoriteBusinessesResponse, error)
	GetFavoriteItems(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*FavoriteItemsResponse, error)
	AddFavoriteBusiness(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error)
	DeleteFavoriteBusiness(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error)
	AddFavoriteItem(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error)
	DeleteFavoriteItem(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error)
}

type userFirestoreClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFirestoreClient(cc grpc.ClientConnInterface) UserFirestoreClient {
	return &userFirestoreClient{cc}
}

func (c *userFirestoreClient) GetFavoriteBusinesses(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*FavoriteBusinessesResponse, error) {
	out := new(FavoriteBusinessesResponse)
	err := c.cc.Invoke(ctx, "/TapMars.userFirestore.v1.UserFirestore/GetFavoriteBusinesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFirestoreClient) GetFavoriteItems(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*FavoriteItemsResponse, error) {
	out := new(FavoriteItemsResponse)
	err := c.cc.Invoke(ctx, "/TapMars.userFirestore.v1.UserFirestore/GetFavoriteItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFirestoreClient) AddFavoriteBusiness(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error) {
	out := new(v1.SuccessResponse)
	err := c.cc.Invoke(ctx, "/TapMars.userFirestore.v1.UserFirestore/AddFavoriteBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFirestoreClient) DeleteFavoriteBusiness(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error) {
	out := new(v1.SuccessResponse)
	err := c.cc.Invoke(ctx, "/TapMars.userFirestore.v1.UserFirestore/DeleteFavoriteBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFirestoreClient) AddFavoriteItem(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error) {
	out := new(v1.SuccessResponse)
	err := c.cc.Invoke(ctx, "/TapMars.userFirestore.v1.UserFirestore/AddFavoriteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFirestoreClient) DeleteFavoriteItem(ctx context.Context, in *UserChangeRequest, opts ...grpc.CallOption) (*v1.SuccessResponse, error) {
	out := new(v1.SuccessResponse)
	err := c.cc.Invoke(ctx, "/TapMars.userFirestore.v1.UserFirestore/DeleteFavoriteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFirestoreServer is the server API for UserFirestore service.
// All implementations must embed UnimplementedUserFirestoreServer
// for forward compatibility
type UserFirestoreServer interface {
	GetFavoriteBusinesses(context.Context, *UserRequest) (*FavoriteBusinessesResponse, error)
	GetFavoriteItems(context.Context, *UserRequest) (*FavoriteItemsResponse, error)
	AddFavoriteBusiness(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error)
	DeleteFavoriteBusiness(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error)
	AddFavoriteItem(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error)
	DeleteFavoriteItem(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error)
	mustEmbedUnimplementedUserFirestoreServer()
}

// UnimplementedUserFirestoreServer must be embedded to have forward compatible implementations.
type UnimplementedUserFirestoreServer struct {
}

func (UnimplementedUserFirestoreServer) GetFavoriteBusinesses(context.Context, *UserRequest) (*FavoriteBusinessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteBusinesses not implemented")
}
func (UnimplementedUserFirestoreServer) GetFavoriteItems(context.Context, *UserRequest) (*FavoriteItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteItems not implemented")
}
func (UnimplementedUserFirestoreServer) AddFavoriteBusiness(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavoriteBusiness not implemented")
}
func (UnimplementedUserFirestoreServer) DeleteFavoriteBusiness(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavoriteBusiness not implemented")
}
func (UnimplementedUserFirestoreServer) AddFavoriteItem(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavoriteItem not implemented")
}
func (UnimplementedUserFirestoreServer) DeleteFavoriteItem(context.Context, *UserChangeRequest) (*v1.SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavoriteItem not implemented")
}
func (UnimplementedUserFirestoreServer) mustEmbedUnimplementedUserFirestoreServer() {}

// UnsafeUserFirestoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFirestoreServer will
// result in compilation errors.
type UnsafeUserFirestoreServer interface {
	mustEmbedUnimplementedUserFirestoreServer()
}

func RegisterUserFirestoreServer(s grpc.ServiceRegistrar, srv UserFirestoreServer) {
	s.RegisterService(&UserFirestore_ServiceDesc, srv)
}

func _UserFirestore_GetFavoriteBusinesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFirestoreServer).GetFavoriteBusinesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.userFirestore.v1.UserFirestore/GetFavoriteBusinesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFirestoreServer).GetFavoriteBusinesses(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFirestore_GetFavoriteItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFirestoreServer).GetFavoriteItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.userFirestore.v1.UserFirestore/GetFavoriteItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFirestoreServer).GetFavoriteItems(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFirestore_AddFavoriteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFirestoreServer).AddFavoriteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.userFirestore.v1.UserFirestore/AddFavoriteBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFirestoreServer).AddFavoriteBusiness(ctx, req.(*UserChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFirestore_DeleteFavoriteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFirestoreServer).DeleteFavoriteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.userFirestore.v1.UserFirestore/DeleteFavoriteBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFirestoreServer).DeleteFavoriteBusiness(ctx, req.(*UserChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFirestore_AddFavoriteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFirestoreServer).AddFavoriteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.userFirestore.v1.UserFirestore/AddFavoriteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFirestoreServer).AddFavoriteItem(ctx, req.(*UserChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFirestore_DeleteFavoriteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFirestoreServer).DeleteFavoriteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TapMars.userFirestore.v1.UserFirestore/DeleteFavoriteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFirestoreServer).DeleteFavoriteItem(ctx, req.(*UserChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFirestore_ServiceDesc is the grpc.ServiceDesc for UserFirestore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFirestore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TapMars.userFirestore.v1.UserFirestore",
	HandlerType: (*UserFirestoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFavoriteBusinesses",
			Handler:    _UserFirestore_GetFavoriteBusinesses_Handler,
		},
		{
			MethodName: "GetFavoriteItems",
			Handler:    _UserFirestore_GetFavoriteItems_Handler,
		},
		{
			MethodName: "AddFavoriteBusiness",
			Handler:    _UserFirestore_AddFavoriteBusiness_Handler,
		},
		{
			MethodName: "DeleteFavoriteBusiness",
			Handler:    _UserFirestore_DeleteFavoriteBusiness_Handler,
		},
		{
			MethodName: "AddFavoriteItem",
			Handler:    _UserFirestore_AddFavoriteItem_Handler,
		},
		{
			MethodName: "DeleteFavoriteItem",
			Handler:    _UserFirestore_DeleteFavoriteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userFirestore/v1/userFirestore.proto",
}
