// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: userFirestore/v1/userFirestore.proto

package v1

import (
	v1 "github.com/TapMars/protobuf-models-go/v1"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FavoriteItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BusinessId   string        `protobuf:"bytes,3,opt,name=businessId,proto3" json:"businessId,omitempty"`
	BusinessName string        `protobuf:"bytes,4,opt,name=businessName,proto3" json:"businessName,omitempty"`
	Detail       string        `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Day          v1.Day        `protobuf:"varint,6,opt,name=day,proto3,enum=TapMars.models.v1.Day" json:"day,omitempty"`
	HappyHour    *v1.HappyHour `protobuf:"bytes,7,opt,name=happyHour,proto3" json:"happyHour,omitempty"`
	Type         v1.ItemType   `protobuf:"varint,8,opt,name=type,proto3,enum=TapMars.models.v1.ItemType" json:"type,omitempty"`
	DateCreated  string        `protobuf:"bytes,9,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
}

func (x *FavoriteItem) Reset() {
	*x = FavoriteItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteItem) ProtoMessage() {}

func (x *FavoriteItem) ProtoReflect() protoreflect.Message {
	mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteItem.ProtoReflect.Descriptor instead.
func (*FavoriteItem) Descriptor() ([]byte, []int) {
	return file_userFirestore_v1_userFirestore_proto_rawDescGZIP(), []int{0}
}

func (x *FavoriteItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FavoriteItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FavoriteItem) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *FavoriteItem) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *FavoriteItem) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *FavoriteItem) GetDay() v1.Day {
	if x != nil {
		return x.Day
	}
	return v1.Day_Monday
}

func (x *FavoriteItem) GetHappyHour() *v1.HappyHour {
	if x != nil {
		return x.HappyHour
	}
	return nil
}

func (x *FavoriteItem) GetType() v1.ItemType {
	if x != nil {
		return x.Type
	}
	return v1.ItemType_Drink
}

func (x *FavoriteItem) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

type FavoriteBusiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address     *v1.Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	DateCreated string      `protobuf:"bytes,4,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
}

func (x *FavoriteBusiness) Reset() {
	*x = FavoriteBusiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteBusiness) ProtoMessage() {}

func (x *FavoriteBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteBusiness.ProtoReflect.Descriptor instead.
func (*FavoriteBusiness) Descriptor() ([]byte, []int) {
	return file_userFirestore_v1_userFirestore_proto_rawDescGZIP(), []int{1}
}

func (x *FavoriteBusiness) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FavoriteBusiness) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FavoriteBusiness) GetAddress() *v1.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *FavoriteBusiness) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

type FavoriteItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*FavoriteItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FavoriteItemsResponse) Reset() {
	*x = FavoriteItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteItemsResponse) ProtoMessage() {}

func (x *FavoriteItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteItemsResponse.ProtoReflect.Descriptor instead.
func (*FavoriteItemsResponse) Descriptor() ([]byte, []int) {
	return file_userFirestore_v1_userFirestore_proto_rawDescGZIP(), []int{2}
}

func (x *FavoriteItemsResponse) GetItems() []*FavoriteItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FavoriteBusinessesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Businesses []*FavoriteBusiness `protobuf:"bytes,1,rep,name=businesses,proto3" json:"businesses,omitempty"`
}

func (x *FavoriteBusinessesResponse) Reset() {
	*x = FavoriteBusinessesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteBusinessesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteBusinessesResponse) ProtoMessage() {}

func (x *FavoriteBusinessesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteBusinessesResponse.ProtoReflect.Descriptor instead.
func (*FavoriteBusinessesResponse) Descriptor() ([]byte, []int) {
	return file_userFirestore_v1_userFirestore_proto_rawDescGZIP(), []int{3}
}

func (x *FavoriteBusinessesResponse) GetBusinesses() []*FavoriteBusiness {
	if x != nil {
		return x.Businesses
	}
	return nil
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_userFirestore_v1_userFirestore_proto_rawDescGZIP(), []int{4}
}

func (x *UserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=documentId,proto3" json:"documentId,omitempty"`
	Notify     bool   `protobuf:"varint,3,opt,name=notify,proto3" json:"notify,omitempty"`
}

func (x *UserChangeRequest) Reset() {
	*x = UserChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChangeRequest) ProtoMessage() {}

func (x *UserChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userFirestore_v1_userFirestore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChangeRequest.ProtoReflect.Descriptor instead.
func (*UserChangeRequest) Descriptor() ([]byte, []int) {
	return file_userFirestore_v1_userFirestore_proto_rawDescGZIP(), []int{5}
}

func (x *UserChangeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserChangeRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *UserChangeRequest) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

var File_userFirestore_v1_userFirestore_proto protoreflect.FileDescriptor

var file_userFirestore_v1_userFirestore_proto_rawDesc = []byte{
	0x0a, 0x24, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x54,
	0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x61,
	0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x55, 0x0a, 0x15, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x61, 0x70,
	0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x68, 0x0a, 0x1a, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x61,
	0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x32,
	0x9b, 0x05, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x54, 0x61, 0x70,
	0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x25, 0x2e,
	0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2b,
	0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61,
	0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x54, 0x61,
	0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x2b, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x2e, 0x54, 0x61, 0x70,
	0x4d, 0x61, 0x72, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x54, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x70, 0x4d,
	0x61, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userFirestore_v1_userFirestore_proto_rawDescOnce sync.Once
	file_userFirestore_v1_userFirestore_proto_rawDescData = file_userFirestore_v1_userFirestore_proto_rawDesc
)

func file_userFirestore_v1_userFirestore_proto_rawDescGZIP() []byte {
	file_userFirestore_v1_userFirestore_proto_rawDescOnce.Do(func() {
		file_userFirestore_v1_userFirestore_proto_rawDescData = protoimpl.X.CompressGZIP(file_userFirestore_v1_userFirestore_proto_rawDescData)
	})
	return file_userFirestore_v1_userFirestore_proto_rawDescData
}

var file_userFirestore_v1_userFirestore_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_userFirestore_v1_userFirestore_proto_goTypes = []interface{}{
	(*FavoriteItem)(nil),               // 0: TapMars.userFirestore.v1.FavoriteItem
	(*FavoriteBusiness)(nil),           // 1: TapMars.userFirestore.v1.FavoriteBusiness
	(*FavoriteItemsResponse)(nil),      // 2: TapMars.userFirestore.v1.FavoriteItemsResponse
	(*FavoriteBusinessesResponse)(nil), // 3: TapMars.userFirestore.v1.FavoriteBusinessesResponse
	(*UserRequest)(nil),                // 4: TapMars.userFirestore.v1.UserRequest
	(*UserChangeRequest)(nil),          // 5: TapMars.userFirestore.v1.UserChangeRequest
	(v1.Day)(0),                        // 6: TapMars.models.v1.Day
	(*v1.HappyHour)(nil),               // 7: TapMars.models.v1.HappyHour
	(v1.ItemType)(0),                   // 8: TapMars.models.v1.ItemType
	(*v1.Address)(nil),                 // 9: TapMars.models.v1.Address
	(*v1.SuccessResponse)(nil),         // 10: TapMars.models.v1.SuccessResponse
}
var file_userFirestore_v1_userFirestore_proto_depIdxs = []int32{
	6,  // 0: TapMars.userFirestore.v1.FavoriteItem.day:type_name -> TapMars.models.v1.Day
	7,  // 1: TapMars.userFirestore.v1.FavoriteItem.happyHour:type_name -> TapMars.models.v1.HappyHour
	8,  // 2: TapMars.userFirestore.v1.FavoriteItem.type:type_name -> TapMars.models.v1.ItemType
	9,  // 3: TapMars.userFirestore.v1.FavoriteBusiness.address:type_name -> TapMars.models.v1.Address
	0,  // 4: TapMars.userFirestore.v1.FavoriteItemsResponse.items:type_name -> TapMars.userFirestore.v1.FavoriteItem
	1,  // 5: TapMars.userFirestore.v1.FavoriteBusinessesResponse.businesses:type_name -> TapMars.userFirestore.v1.FavoriteBusiness
	4,  // 6: TapMars.userFirestore.v1.UserFirestore.GetFavoriteBusinesses:input_type -> TapMars.userFirestore.v1.UserRequest
	4,  // 7: TapMars.userFirestore.v1.UserFirestore.GetFavoriteItems:input_type -> TapMars.userFirestore.v1.UserRequest
	5,  // 8: TapMars.userFirestore.v1.UserFirestore.AddFavoriteBusiness:input_type -> TapMars.userFirestore.v1.UserChangeRequest
	5,  // 9: TapMars.userFirestore.v1.UserFirestore.DeleteFavoriteBusiness:input_type -> TapMars.userFirestore.v1.UserChangeRequest
	5,  // 10: TapMars.userFirestore.v1.UserFirestore.AddFavoriteItem:input_type -> TapMars.userFirestore.v1.UserChangeRequest
	5,  // 11: TapMars.userFirestore.v1.UserFirestore.DeleteFavoriteItem:input_type -> TapMars.userFirestore.v1.UserChangeRequest
	3,  // 12: TapMars.userFirestore.v1.UserFirestore.GetFavoriteBusinesses:output_type -> TapMars.userFirestore.v1.FavoriteBusinessesResponse
	2,  // 13: TapMars.userFirestore.v1.UserFirestore.GetFavoriteItems:output_type -> TapMars.userFirestore.v1.FavoriteItemsResponse
	10, // 14: TapMars.userFirestore.v1.UserFirestore.AddFavoriteBusiness:output_type -> TapMars.models.v1.SuccessResponse
	10, // 15: TapMars.userFirestore.v1.UserFirestore.DeleteFavoriteBusiness:output_type -> TapMars.models.v1.SuccessResponse
	10, // 16: TapMars.userFirestore.v1.UserFirestore.AddFavoriteItem:output_type -> TapMars.models.v1.SuccessResponse
	10, // 17: TapMars.userFirestore.v1.UserFirestore.DeleteFavoriteItem:output_type -> TapMars.models.v1.SuccessResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_userFirestore_v1_userFirestore_proto_init() }
func file_userFirestore_v1_userFirestore_proto_init() {
	if File_userFirestore_v1_userFirestore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userFirestore_v1_userFirestore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userFirestore_v1_userFirestore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteBusiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userFirestore_v1_userFirestore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userFirestore_v1_userFirestore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteBusinessesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userFirestore_v1_userFirestore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userFirestore_v1_userFirestore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userFirestore_v1_userFirestore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userFirestore_v1_userFirestore_proto_goTypes,
		DependencyIndexes: file_userFirestore_v1_userFirestore_proto_depIdxs,
		MessageInfos:      file_userFirestore_v1_userFirestore_proto_msgTypes,
	}.Build()
	File_userFirestore_v1_userFirestore_proto = out.File
	file_userFirestore_v1_userFirestore_proto_rawDesc = nil
	file_userFirestore_v1_userFirestore_proto_goTypes = nil
	file_userFirestore_v1_userFirestore_proto_depIdxs = nil
}
